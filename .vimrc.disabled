
    " This plugin just disables h/j/k/l, arrows, +/-, gj/gk/gl/gh, PgUp/PgDown
    " Plug 'wikitopian/hardmode'
    " autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
    "
    " Just disable 'j', I use it too often
    "nmap j <nop>
    "
    " This plugin disables repeated use of h/j/k/l and others
    " Hard mode - no jjjjj and kkkkk, :HardTimeToggle to toggle
    " let g:hardtime_allow_different_key = 1
    " let g:list_of_normal_keys = ["h", "j", "k", "l"]
    " let g:list_of_visual_keys = ["h", "j", "k", "l"]
    " Plug 'takac/vim-hardtime'
    " let g:hardtime_default_on = 1
    "
    " This one, like vim-hardtime, only disables repeated use.
    " Disable repeated character-wise movements
    " Use: word motions: w, b, e, ge / W, B, E, gE
    "      char search: f, t, F, T and ; / ,
    "      line start/end: 0, $, ^ (non-blank start)
    "      ex commands: :8,15d - delete lines
    "                   :8,15co . - copy lines
    "                   :-5,-3co . with relative numbers
    "                   :8,15m . - move lines
    "      text objects: Vi{ to select a block in {}
    "      search: /forward or ?backward
    "      insert at start/end: I / A
    "      use by-block movements: { / }, [[ / ]], etc
    "      change list: g; / g, or gi to insert at last change position
    "      jump history: C-O / C-I
    "      matching pair jump: %
    "      line jumps: 50G to line 50 or 20j to 20 lines down
    " See: http://vimcasts.org/blog/2013/02/habit-breaking-habit-making/
    "      http://stackoverflow.com/questions/37059399/vim-motion-without-jk-and-hardmode-installed
    "      https://pbrisbin.com/posts/hard_mode/
    "      :help motion.txt
    " Plug 'kbarrette/mediummode'

    " Plug 'kshenoy/vim-signature'
    " Plug 'vim-scripts/ShowMarks'
    " let g:showmarks_textlower="\t"
    " let g:showmarks_textupper="\t"
    " let g:showmarks_textother="\t"

  """"""" File browser
  " Additional features for netrw
  "  -  to open browser focused on current file, - again to go upper
  "  .  to put selected file name to the end of command line;
  "  !  to do the same and start command line with !
  "  ~  go home; cd/cl - :cd / :lcd
  " Plug 'tpope/vim-vinegar'
  augroup MyAutoCmd
    "" use Leader-r to refresh (default is Ctrl-L which is used to jump
    "" to the left window)
    autocmd FileType netrw nnoremap <buffer> <Leader>r <Plug>NetrwRefresh
  augroup END

  " :ConqueTerm bash
  " :ConqueTerm mysql -h localhost -u joe -p sock_collection
  " :ConqueTerm ipython
  " Note: to open file use 'gf'
  Plug 'lrvick/Conque-Shell'
  
  " :Gitv - git history viewer
  " Plug 'gregsexton/gitv'
  " :Extradite - git browser
  " Plug 'int3/vim-extradite'
  " Merge tool, see http://sjl.bitbucket.org/splice.vim/
  " git setup:
  "  mergetool.splice.cmd=gvim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'
  "  mergetool.splice.trustexitcode=true
  " Splice commands are called via 'g:splice_previx' ('-' by default)
  Plug 'sjl/splice.vim'

  " Improves the commit buffer - splits into diff, edit, status.
  Plug 'rhysd/committia.vim'

  " -> https://github.com/vim-vdebug/vdebug
  " Plug 'joonty/vdebug'
  " Automatic ctags re-generator
" " Debugger {{{
"   "http://jaredforsyth.com/projects/vim-debug/
"   function! DebugWeb(url)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 1
"     let url = a:url
"     let http_pos = stridx(url, 'http')
"     if http_pos != 0
"       let url = 'http://'.url
"     endif
"     let q_pos = stridx(url, '?')
"     if q_pos == -1
"       let url = url.'?XDEBUG_SESSION_START=vim_debug'
"     else
"       let url = url.'&XDEBUG_SESSION_START=vim_debug'
"     endif
"     exec "!xdg-open '".url."'"
"     python debugger.run()
"   endfunction
"   " example:
"   "   :Debug localsite.com
"   command! -nargs=1 DebugWeb call DebugWeb('<args>')
" 
"   function! DebugPy(...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     "with -S it doesn't work in virtual env
"     "let last_cmd = '!python -S ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     let last_cmd = '!python ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
"   " python debugging requires pydbgp
"   " download from http://code.activestate.com/komodo/remotedebugging/ (version 7.1.3 works)
"   " example (open test file first):
"   "   :DebugPy -c tests/acceptance/selenuim/dev.cfg
"   command! -nargs=* -complete=file DebugPy call DebugPy('% <args>')
" 
"   function! DebugPhp(command, ...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     let last_cmd = '!export XDEBUG_CONFIG="idekey=vim_debug" && sleep 2 && ' . a:command . ' ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
" 
"   " example (runtests.sh invokes phpunit):
"   "   :DebugPhp wordpress-tests/runtests.sh --filter test_export_book_new --bootstrap wordpress-tests/bootstrap.php %
"   command! -nargs=* -complete=file DebugPhp call DebugPhp('<args>')
"   "command! -nargs=* -complete=file DebugPhpTemp call DebugPhpTemp('<args>')
"   " example (open test file first):
"   "   :DebugPhpunit --bootstrap tests/unitTests/bootstrap.php
"   command! -nargs=* -complete=file DebugPhpunit call DebugPhp('phpunit', '<args> %')
"   " example (open test file first):
"   "   :DebugPhpScript %
"   command! -nargs=* -complete=file DebugPhpScript call DebugPhp('php', '<args>')
"   " example
"   "   :DebugPhpConsole appadd appto.tests@gmail.com "{\"platform\": {\"app\": ...}}"
"   command! -nargs=* DebugYiiConsole call DebugPhp('console/yiic', '<args>')
" 
"   let g:vdebug_options = {
"   \    "timeout" : 200,
"   \    "break_on_open" : 0,
"   \    "ide_key" : 'vim_debug',
"   \    "continuous_mode" : 1,
"   \    "auto_start" : 1,
"   \}
"   let g:vdebug_keymap = {
"   \    "run" : "<F5>",
"   \    "run_to_cursor" : "<F9>",
"   \    "step_over" : "<F8>",
"   \    "step_into" : "<F7>",
"   \    "step_out" : "<F4>",
"   \    "close" : "<F6>",
"   \    "detach" : "<F11>",
"   \    "set_breakpoint" : "<F12>",
"   \    "get_context" : "<F10>",
"   \    "eval_under_cursor" : "<F3>",
"   \}
" 
" " }}}

""" Built-in command improvements
"
" :QFdo - quickfix do - run a command over quckfix files, see also :LLdo for location list
" :BufTypeDo, :BufMatchDo - run a command over buffers of specified type or
"    buffers with name matching the pattern
" :View command -> command result to split buffer, like :View ilist vim
"    or :View map x
" Alternative is to use 'redir' command:
"   :redir >name_of_registers_file
"   :registers
"   :redir END
"   :r name_of_registers_file
" OR:
"   :redir => m | silent registers | redir END | put=m
" See
"   :help redir
" :Collect register-or-var command -> command result to register or var
"  Collect('reg-or-var command') - similar as function
" :GCollect - returns a list of lines for :g/pattern/, see also :GCCollect
" :MyMaps - active maps into the new buffer
" :Filter - like interactive :g/re/p - modifies the buffer! - leaves only matching lines in a buffer
" z=, [I, g] - overlay for spell suggestions, search results, tag search results
" Scall (script, function, arg) - call local function from script
" nnoremap q[I <plug>vimple_ident_search<bs>
" nnoremap q]I <plug>vimple_ident_search_forward
" " rempap to avoid conflict
" inoremap vjj <plug>vimple_completers_trigger
" Plug 'dahu/Vimple'


" Gundo.vim is Vim plugin to visualize your Vim undo tree.
" Plug 'sjl/gundo.vim'
" Similar: Plug 'mbbill/undotree'

" HTTP client
" Example:
" # Second request.
" # :foo = bar
" POST http://httpbin.org/post
" {
"   "data": ":foo",
"   "otherkey": "hello"
" }
" <Leader>tt to run the request
" Similar: Plug 'nicwest/QQ.vim'
" Plug 'aquach/vim-http-client'

"""""" Wakatime: https://wakatime.com
" Plug 'wakatime/vim-wakatime'

Plug '~/.vim/bundle/potion'

" On search automatically prints "At match #N out of M matches".
" Plug 'henrik/vim-indexed-search'

" autosession.vim settings
" noremap <Leader>s :SessionList<CR>
" default: blank,buffers,curdir,folds,help,options,tabpages,winsize"
" let g:debug_autosession = 0
" let g:debug_autosession_file = '~/vim.autosession.log'
" let g:autosession_load_after = 'LoadLocalVimrc()'
" Note: to debug Vim error on exit, run it with -V9errorlog
"       and all messages will be saved to errorlog

" Mini-plugin to auto-save and restore last session
" Good when you have 1 project, not convenient for multiple
" projects.
"
" let s:session_loaded = 1
" augroup autosession
"   " load last session on start
"   " Note: without 'nested' filetypes are not restored.
"   autocmd VimEnter * nested call s:session_vim_enter()
"   autocmd VimLeavePre * call s:session_vim_leave()
" augroup END

" function! s:session_vim_enter()
"     if bufnr('$') == 1 && bufname('%') == '' && !&mod && getline(1, '$') == ['']
"         execute 'silent source ~/.vim/sessions/lastsession.vim'
"     else
"       let s:session_loaded = 0
"     endif
" endfunction

" function! s:session_vim_leave()
"   if s:session_loaded == 1
"     let sessionoptions = &sessionoptions
"     try
"         set sessionoptions-=options
"         set sessionoptions+=tabpages
"         execute 'mksession! ~/.vim/sessions/lastsession.vim'
"     finally
"         let &sessionoptions = sessionoptions
"     endtry
"   endif
" endfunction

" Disabled {{{
  " adopt color schemes for terminal
  " Plug 'godlygeek/csapprox'
  "
  " better search hightlights
  " Plug 'haya14busa/incsearch.vim'
  " " Similar: https://github.com/junegunn/vim-oblique/
  " " Similar: https://github.com/dahu/SearchParty
  " " Similar: 'osyo-manga/vim-over' - highlighs in cmd win (Ctrl-f in cmd
  " mode) and has own :OverCommandLine where it also shows replace preview
  " ---
  " Usage:
  " - just search to see the incremental matches highlight
  " - Tab / S-Tab to go forward/backward between results
  " - automatically disables highlight when you move the cursor with
  "   non-search related movements (just do j or k when search is active to
  "   disable highlight)
  " map /  <Plug>(incsearch-forward)\v
  " map ?  <Plug>(incsearch-backward)\v
  " " Search, but don't move the cursor (usually moves to the first match)
  " map g/ <Plug>(incsearch-stay)
  " " Setup for vim-indexed-search
  " " See: https://github.com/haya14busa/incsearch.vim/issues/21
  " let g:indexed_search_mappings = 0
  " augroup incsearch-indexed
  "   autocmd!
  "   autocmd User IncSearchLeave ShowSearchIndex
  " augroup END
  " nnoremap <silent>n nzv:ShowSearchIndex<CR>
  " nnoremap <silent>N Nzv:ShowSearchIndex<CR>
  " "set hlsearch
  " let g:incsearch#auto_nohlsearch = 1
  " map n  <Plug>(incsearch-nohl-n)zv:ShowSearchIndex<CR>
  " map N  <Plug>(incsearch-nohl-N)zv:ShowSearchIndex<CR>
  " map *  <Plug>(incsearch-nohl-*)
  " map #  <Plug>(incsearch-nohl-#)
  " map g* <Plug>(incsearch-nohl-g*)
  " map g# <Plug>(incsearch-nohl-g#)

  " :Multichange to enter multichange mode (cw will affect the whole file)
  " Plug 'AndrewRadev/multichange.vim'
  " disable mapping entirely
  " let g:multichange_mapping = ''

  " highlight matching surronding pairs ({ }, ( ), etc)
  "Plug 'Yggdroot/hiPairs'
  " :DoMatchParen
  "
  " Semantic highlighting
  " See: http://www.reddit.com/r/vim/comments/23qy7j/semantic_highlighting/
  "      https://medium.com/@evnbr/coding-in-color-3a6db2743a1e
  "      http://stackoverflow.com/questions/21425279/is-there-a-vim-plugin-for-semantics-syntax-highlighting
  "      http://stackoverflow.com/questions/21383532/vim-variable-syntax-highlighting
  "      https://github.com/bigfish/vim-js-context-coloring
  "      https://plus.google.com/+DouglasCrockfordEsq/posts/FzKnHk96m2C
  "
  " :SemanticHighlightToggle - on/off
  " Plug 'jaxbot/semantic-highlight.vim'
  "
  " Vim / tmux splits integration
  " <ctrl-h> => Left
  " <ctrl-j> => Down
  " <ctrl-k> => Up
  " <ctrl-l> => Right
  " <ctrl-\> => Previous split
  " Plug 'christoomey/vim-tmux-navigator'
  ":Tmux lets you call any old tmux command (with really good tab complete).
  ":Tyank and :Tput give you direct access to tmux buffers.
  ":Twrite sends a chunk of text to another pane. Give an argument like windowtitle.2, top-right, or last, or let it default to the previously given argument.
  ":Tattach lets you use a specific tmux session from outside of it.
  " Plug 'tpope/vim-tbone'
  "
  " Note: compare with tbone - :Twrite 1.2 also sends text to another
  "       tmux pane
  " Repl for vim
  " Ctrl-c c - run code in other tmux pane (set :1.2 for win 1 pane 2)
  " See: http://vimeo.com/34184155 and https://technotales.wordpress.com/2007/10/03/like-slime-for-vim/
  " Can be used for anything: python, node, bash, mysql, etc
  "Plug 'jpalardy/vim-slime'
  "let g:slime_target = "tmux"
  "let g:slime_python_ipython = 1
  "
  " Similar: https://github.com/krisajenkins/vim-pipe
  "
  " Create and format tables (including formulas)
  " Plug 'dhruvasagar/vim-table-mode'
  "
  " Search in column, arrange column, delete column, move, sum and much more
  " Plug 'chrisbra/csv.vim'
  "
  "
  " Highlight yanked text
  " see  http://stackoverflow.com/questions/26069278/hightlight-copied-area-on-vim
  " Lets user define their own operators.
  " Plug 'kana/vim-operator-user'
  " Operator to do two or more operators.
  " Plug 'thinca/vim-operator-sequence'
  " Highlight yanked text
  " Plug 'osyo-manga/vim-operator-highlight'
  " let g:operator#highlight#clear_time=2.0
  " noremap <expr> <Plug>(yank-highlight) operator#sequence#map("y", "\<Plug>(operator-highlight)")
  " nmap yc <Plug>(yank-highlight)
  " vmap yc <Plug>(yank-highlight)
" }}}
"
