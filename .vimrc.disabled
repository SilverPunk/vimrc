
    " This plugin just disables h/j/k/l, arrows, +/-, gj/gk/gl/gh, PgUp/PgDown
    " Plug 'wikitopian/hardmode'
    " autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
    "
    " Just disable 'j', I use it too often
    "nmap j <nop>
    "
    " This plugin disables repeated use of h/j/k/l and others
    " Hard mode - no jjjjj and kkkkk, :HardTimeToggle to toggle
    " let g:hardtime_allow_different_key = 1
    " let g:list_of_normal_keys = ["h", "j", "k", "l"]
    " let g:list_of_visual_keys = ["h", "j", "k", "l"]
    " Plug 'takac/vim-hardtime'
    " let g:hardtime_default_on = 1
    "
    " This one, like vim-hardtime, only disables repeated use.
    " Disable repeated character-wise movements
    " Use: word motions: w, b, e, ge / W, B, E, gE
    "      char search: f, t, F, T and ; / ,
    "      line start/end: 0, $, ^ (non-blank start)
    "      ex commands: :8,15d - delete lines
    "                   :8,15co . - copy lines
    "                   :-5,-3co . with relative numbers
    "                   :8,15m . - move lines
    "      text objects: Vi{ to select a block in {}
    "      search: /forward or ?backward
    "      insert at start/end: I / A
    "      use by-block movements: { / }, [[ / ]], etc
    "      change list: g; / g, or gi to insert at last change position
    "      jump history: C-O / C-I
    "      matching pair jump: %
    "      line jumps: 50G to line 50 or 20j to 20 lines down
    " See: http://vimcasts.org/blog/2013/02/habit-breaking-habit-making/
    "      http://stackoverflow.com/questions/37059399/vim-motion-without-jk-and-hardmode-installed
    "      https://pbrisbin.com/posts/hard_mode/
    "      :help motion.txt
    " Plug 'kbarrette/mediummode'

    " Plug 'kshenoy/vim-signature'
    " Plug 'vim-scripts/ShowMarks'
    " let g:showmarks_textlower="\t"
    " let g:showmarks_textupper="\t"
    " let g:showmarks_textother="\t"

  """"""" File browser
  " Additional features for netrw
  "  -  to open browser focused on current file, - again to go upper
  "  .  to put selected file name to the end of command line;
  "  !  to do the same and start command line with !
  "  ~  go home; cd/cl - :cd / :lcd
  " Plug 'tpope/vim-vinegar'

  " :ConqueTerm bash
  " :ConqueTerm mysql -h localhost -u joe -p sock_collection
  " :ConqueTerm ipython
  " Note: to open file use 'gf'
  Plug 'lrvick/Conque-Shell'
  
  " :Gitv - git history viewer
  " Plug 'gregsexton/gitv'
  " :Extradite - git browser
  " Plug 'int3/vim-extradite'
  " Merge tool, see http://sjl.bitbucket.org/splice.vim/
  " git setup:
  "  mergetool.splice.cmd=gvim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'
  "  mergetool.splice.trustexitcode=true
  " Splice commands are called via 'g:splice_previx' ('-' by default)
  Plug 'sjl/splice.vim'

  " Improves the commit buffer - splits into diff, edit, status.
  Plug 'rhysd/committia.vim'

  " Plug 'joonty/vdebug'
  " Automatic ctags re-generator
" " Debugger {{{
"   "http://jaredforsyth.com/projects/vim-debug/
"   function! DebugWeb(url)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 1
"     let url = a:url
"     let http_pos = stridx(url, 'http')
"     if http_pos != 0
"       let url = 'http://'.url
"     endif
"     let q_pos = stridx(url, '?')
"     if q_pos == -1
"       let url = url.'?XDEBUG_SESSION_START=vim_debug'
"     else
"       let url = url.'&XDEBUG_SESSION_START=vim_debug'
"     endif
"     exec "!xdg-open '".url."'"
"     python debugger.run()
"   endfunction
"   " example:
"   "   :Debug localsite.com
"   command! -nargs=1 DebugWeb call DebugWeb('<args>')
" 
"   function! DebugPy(...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     "with -S it doesn't work in virtual env
"     "let last_cmd = '!python -S ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     let last_cmd = '!python ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
"   " python debugging requires pydbgp
"   " download from http://code.activestate.com/komodo/remotedebugging/ (version 7.1.3 works)
"   " example (open test file first):
"   "   :DebugPy -c tests/acceptance/selenuim/dev.cfg
"   command! -nargs=* -complete=file DebugPy call DebugPy('% <args>')
" 
"   function! DebugPhp(command, ...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     let last_cmd = '!export XDEBUG_CONFIG="idekey=vim_debug" && sleep 2 && ' . a:command . ' ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
" 
"   " example (runtests.sh invokes phpunit):
"   "   :DebugPhp wordpress-tests/runtests.sh --filter test_export_book_new --bootstrap wordpress-tests/bootstrap.php %
"   command! -nargs=* -complete=file DebugPhp call DebugPhp('<args>')
"   "command! -nargs=* -complete=file DebugPhpTemp call DebugPhpTemp('<args>')
"   " example (open test file first):
"   "   :DebugPhpunit --bootstrap tests/unitTests/bootstrap.php
"   command! -nargs=* -complete=file DebugPhpunit call DebugPhp('phpunit', '<args> %')
"   " example (open test file first):
"   "   :DebugPhpScript %
"   command! -nargs=* -complete=file DebugPhpScript call DebugPhp('php', '<args>')
"   " example
"   "   :DebugPhpConsole appadd appto.tests@gmail.com "{\"platform\": {\"app\": ...}}"
"   command! -nargs=* DebugYiiConsole call DebugPhp('console/yiic', '<args>')
" 
"   let g:vdebug_options = {
"   \    "timeout" : 200,
"   \    "break_on_open" : 0,
"   \    "ide_key" : 'vim_debug',
"   \    "continuous_mode" : 1,
"   \    "auto_start" : 1,
"   \}
"   let g:vdebug_keymap = {
"   \    "run" : "<F5>",
"   \    "run_to_cursor" : "<F9>",
"   \    "step_over" : "<F8>",
"   \    "step_into" : "<F7>",
"   \    "step_out" : "<F4>",
"   \    "close" : "<F6>",
"   \    "detach" : "<F11>",
"   \    "set_breakpoint" : "<F12>",
"   \    "get_context" : "<F10>",
"   \    "eval_under_cursor" : "<F3>",
"   \}
" 
" " }}}

